import java_cup.runtime.*;
import lib.ir.ast.*;
import java.util.LinkedList;
import java.util.List;
import lib.error.Error;

parser code {:

        
        private void setColumnAndLine (AST ast, int line, int column){
            
            ast.setLineNumber(line+1);
            ast.setColumnNumber(column+1);
            
        }

        public void syntax_error(Symbol s){
            System.err.println("Syntax error in line " + (s.left+1) + " column " + (s.right+1) + " value : " + (s.value)); 
            //addError(s, "Syntax error value: " + s.value);
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            throw new java.lang.Exception("Fatal Error");
        }     
:}

terminal CLASS, VOID, INT, FLOAT, BOOLEAN, IF, ELSE, FOR, WHILE, RETURN, BREAK, CONTINUE, EXTERN, LEFTBRACE, RIGHTBRACE, LOGIC_NEGATION, LEFT_PAREN, RT_PAREN, LEFT_BRKT, RT_BRKT, SEMI, COMMA, POINT, ID, ERROR, TIMES, MINUS, PLUS, DIVIDE, MOD, AND, OR, EQ, GTR, LESS, LESS_EQ, GTR_EQ, NOT_EQ, ASSMNT, ASSMNT_INC, ASSMNT_DEC, INT_LITERAL, FLOAT_LITERAL, TRUE, FALSE;



non terminal String id_point_list;

non terminal Type type; 
non terminal Expression expr;
non terminal List<Expression> expr_list;

non terminal Block block, body_block;
non terminal List<Statement> statement_list;

non terminal ClassDecl class_decl, body_class;
non terminal List<ClassDecl> class_list;

non terminal Program program;

non terminal List<FieldDecl> field_list;
non terminal FieldDecl field_decl;

non terminal MethodDecl method_decl;
non terminal List<MethodDecl> method_list;


non terminal Literal literal;
non terminal Location location, type_id;
non terminal VarLocation var_location;
non terminal List<Location> type_id_list;

non terminal Parameter parameter;
non terminal List<Parameter> parameters_list;

non terminal ArrayLocation array_location;
non terminal Statement statement;
non terminal MethodCall method_call; 

precedence left AND;
precedence left OR;
precedence left GTR,LESS,EQ,NOT_EQ,GTR_EQ,LESS_EQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left LEFT_PAREN, RT_PAREN;
precedence left LOGIC_NEGATION;
precedence left ELSE;



start with program;



program ::= class_list:clist {: RESULT = new Program(clist) ;:}
		  ;

class_list ::= class_decl:c {: LinkedList res = new LinkedList(); res.add(c); RESULT = res; :}
            |  class_list:clist class_decl:c {: clist.add(c); RESULT = clist; :}
            ;
                    
class_decl::= CLASS ID:id LEFTBRACE body_class:c RIGHTBRACE {: setColumnAndLine(c,idleft, idright);  c.setId((String)id); RESULT = c; :}
            | CLASS ID:id LEFTBRACE RIGHTBRACE {: ClassDecl res = new ClassDecl((String)id); setColumnAndLine(res, idleft, idright); RESULT = res; :}
            ;

body_class ::= field_list:flist method_list:mlist {: RESULT = new ClassDecl(flist, mlist); :}
             | field_list:flist {: RESULT = new ClassDecl(flist, new LinkedList()); :}
             | method_list:mlist {: RESULT = new ClassDecl(new LinkedList(), mlist); :}
             ;

field_list::= field_list:fl field_decl:fd {: fl.add(fd); RESULT = fl; :}
            | field_decl:fd {:LinkedList res = new LinkedList(); res.add(fd); RESULT = res;:}
            ;
                
field_decl::= type:t type_id_list:tl SEMI:semi {: FieldDecl res = new FieldDecl(t,tl); setColumnAndLine(res,semileft,semiright); RESULT = res; :}
			;
        

type_id_list::= type_id:id {:LinkedList res = new LinkedList(); res.add(id); RESULT = res;:}
              | type_id:id COMMA type_id_list:id_list {: id_list.add(id); RESULT = id_list; :}
              ;
                    
type_id::= ID:id LEFT_BRKT INT_LITERAL:e RT_BRKT {: ArrayLocation res = new ArrayLocation((String)id, new IntLiteral((String)e)); setColumnAndLine(res, idleft, idright); RESULT = res; :}
         | ID:id  {:VarLocation res = new VarLocation((String)id); setColumnAndLine(res, idleft, idright); RESULT = res; :}               
         ;
                
method_list::= method_list:mlist method_decl:m {: mlist.add(m); RESULT = mlist; :} 
             | method_decl:m {: LinkedList res = new LinkedList(); res.add(m); RESULT = res ;:}
             ;

method_decl::= VOID ID:id LEFT_PAREN parameters_list:plist RT_PAREN block:b {: MethodDecl res = new MethodDecl(Type.VOID, (String) id, plist, b); setColumnAndLine(res, idleft, idright); RESULT = res; :}
             | type:t ID:id LEFT_PAREN parameters_list:plist RT_PAREN block:b {: MethodDecl res = new MethodDecl(t, (String) id, plist, b); setColumnAndLine(res, idleft, idright); RESULT = res; :}
             | VOID ID:id LEFT_PAREN RT_PAREN block:b {: MethodDecl res = new MethodDecl(Type.VOID, (String) id, new LinkedList(), b); setColumnAndLine(res, idleft, idright); RESULT = res; :}
             | type:t ID:id LEFT_PAREN RT_PAREN block:b {: MethodDecl res = new MethodDecl(t, (String) id, new LinkedList(), b); setColumnAndLine(res, idleft, idright); RESULT = res; :}
             | VOID ID:id LEFT_PAREN parameters_list:plist RT_PAREN EXTERN SEMI {: MethodDecl res = new MethodDecl(Type.VOID, (String) id, plist); setColumnAndLine(res, idleft, idright); RESULT = res;:}
             | type:t ID:id LEFT_PAREN parameters_list:plist RT_PAREN EXTERN SEMI {: MethodDecl res = new MethodDecl(t, (String) id, plist); setColumnAndLine(res, idleft, idright); RESULT = res;:}
             | VOID ID:id LEFT_PAREN RT_PAREN EXTERN SEMI {: MethodDecl res = new MethodDecl(Type.VOID, (String) id, new LinkedList()); setColumnAndLine(res, idleft, idright); RESULT = res;:}
             | type:t ID:id LEFT_PAREN RT_PAREN EXTERN SEMI {: MethodDecl res = new MethodDecl(t, (String) id, new LinkedList()); setColumnAndLine(res, idleft, idright); RESULT = res;:}
             ;

parameters_list::= parameter:p {: LinkedList res = new LinkedList(); res.add(p); RESULT = res; :}
                 | parameter:p COMMA parameters_list:plist {: plist.add(p); RESULT = plist; :}
                 ;
                        
parameter::= type:t ID:id {: Parameter res = new Parameter(t,(String)id); setColumnAndLine(res, idleft, idright); RESULT = res; :} 
		   ;

block::= LEFTBRACE:left body_block:b RIGHTBRACE {: setColumnAndLine(b, leftleft, leftright); RESULT = b; :}
       | LEFTBRACE RIGHTBRACE {: RESULT = new Block(0); :}
       ;
       
body_block ::= field_list:fl statement_list:sl {: RESULT = new Block(0,sl,fl); :}
             | field_list:fl {:RESULT = new Block(0,new LinkedList(),fl);:}
             | statement_list:sl {:RESULT = new Block(0,sl,new LinkedList());:}
             ;

type::= INT {: RESULT = Type.INT ;:}
	  | FLOAT {: RESULT = Type.FLOAT ;:}
	  | BOOLEAN {: RESULT = Type.BOOLEAN ;:}
	  ;

statement_list::= statement_list:sl statement:s {: sl.add(s); RESULT = sl; :}
                | statement:s {: LinkedList res = new LinkedList(); res.add(s); RESULT = res; :}
                ;
                        
statement::= location:l ASSMNT:op expr:e SEMI {: Statement res = new AssignStmt(l,AssignOpType.ASSMNT,e); setColumnAndLine(res, opleft, opright); RESULT = res;  :}
           | location:l ASSMNT_INC:op expr:e SEMI {: Statement res = new AssignStmt(l,AssignOpType.ASSMNT_INC,e); setColumnAndLine(res, opleft, opright); RESULT = res;  :}
           | location:l ASSMNT_DEC:op expr:e SEMI {: Statement res = new AssignStmt(l,AssignOpType.ASSMNT_DEC,e); setColumnAndLine(res, opleft, opright); RESULT = res;  :}
           | method_call:m SEMI:semi {: Statement res = new MethodCallStmt(m); setColumnAndLine(res, semileft, semiright);  RESULT = res;  :} 
           | IF:i LEFT_PAREN expr:e RT_PAREN statement:s1 ELSE statement:s2 {: Statement res = new IfStmt(e,s1,s2); setColumnAndLine(res, ileft, iright); RESULT = res; :}
           | IF:i LEFT_PAREN expr:e RT_PAREN statement:s {: Statement res = new IfStmt(e,s); setColumnAndLine(res, ileft, iright); RESULT = res; :}
           //| IF LEFT_PAREN expr RT_PAREN ifBlock ELSE elseBlock 
           //| IF LEFT_PAREN expr RT_PAREN ifBlock
           | FOR:f ID:id ASSMNT expr:e1 COMMA expr:e2 statement:s {: VarLocation var = new VarLocation((String)id); var.setType(Type.INT); AssignStmt assign = new AssignStmt(var,AssignOpType.ASSMNT,e1); Statement res = new ForStmt (assign,e2,s); setColumnAndLine(res, fleft, fright); RESULT = res; :}
           | WHILE:w expr:e statement:s {: Statement res = new WhileStmt(e,s); setColumnAndLine(res, wleft, wright);  RESULT = res; :}
           | RETURN:r expr:e SEMI {: Statement res = new ReturnStmt(e); setColumnAndLine(res, rleft, rright);  RESULT = res; :}
           | RETURN:r SEMI {: Statement res = new ReturnStmt(); setColumnAndLine(res, rleft, rright);  RESULT = res; :} 
           | BREAK:b  SEMI {: Statement res = new BreakStmt(); setColumnAndLine(res, bleft, bright);  RESULT = res; :} 
           | CONTINUE:c SEMI {: Statement res = new ContinueStmt(); setColumnAndLine(res, cleft, cright);  RESULT = res; :}
           | SEMI
           | block:b {:  RESULT = b; :}
           ;
                                              
method_call::= var_location:l LEFT_PAREN:left expr_list:e RT_PAREN {:MethodCall res = new MethodCall(l,e); setColumnAndLine(res, leftleft, leftright); RESULT = res;:}
             | var_location:l LEFT_PAREN:left RT_PAREN {:MethodCall res = new MethodCall(l); setColumnAndLine(res, leftleft, leftright); RESULT = res;:}
             ;

location::= var_location:l {: RESULT = l;:}
		  | array_location:l {: RESULT = l;:} 
		  ;
          
var_location::= ID:id id_point_list:id_list {: VarLocation res = new VarLocation(((String)id)+id_list); setColumnAndLine(res, idleft, idright); RESULT = res; :}
			  | ID:id {: VarLocation res  = new VarLocation((String)id) ; setColumnAndLine(res, idleft, idright); RESULT = res; :}
			  ;

array_location::= ID:id LEFT_BRKT expr:e RT_BRKT {: ArrayLocation res = new ArrayLocation(((String)id),e) ; setColumnAndLine(res, idleft, idright); RESULT = res; :}
                | ID:id id_point_list:id_list LEFT_BRKT expr:e RT_BRKT {: ArrayLocation res = new ArrayLocation((((String)id)+id_list),e); setColumnAndLine(res, idleft, idright); RESULT = res ;:}
          		;

id_point_list::= id_point_list:id_list POINT:p ID:id {: RESULT = id_list+((String)p)+((String)id); :}
               |POINT:p ID:id {: RESULT = ((String)p)+((String)id); :}
               ;

expr_list::= expr:e COMMA expr_list:list {: list.add(e); RESULT = list; :}
           | expr:e {: LinkedList res = new LinkedList(); res.add(e); RESULT = res; :}
           ;
                
expr::= location:l {: RESULT = l ; :}
      | method_call:m {: RESULT = m ; :}
      | literal:l {: RESULT = l;:}
      | expr:e1 PLUS:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.PLUS,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 MINUS:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.MINUS,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 TIMES:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.TIMES,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 DIVIDE:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.DIVIDE,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 MOD:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.MOD,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 GTR:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.GTR,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 LESS:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.LESS,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 GTR_EQ:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.GTR_EQ,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 LESS_EQ:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.LESS_EQ,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 EQ:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.EQ,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 NOT_EQ:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.NOT_EQ,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 AND:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.AND,e2); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | expr:e1 OR:o expr:e2 {: BinOpExpr res = new BinOpExpr(e1,BinOpType.OR,e2);setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | MINUS:o expr:e {: UnOpExpr res = new UnOpExpr(UnOpType.MINUS, e); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | LOGIC_NEGATION:o expr:e {: UnOpExpr res = new UnOpExpr(UnOpType.LOGIC_NEGATION, e); setColumnAndLine(res, oleft, oright); RESULT = res;:}
      | LEFT_PAREN:l expr:e RT_PAREN {: RESULT = e ; :}
      ;
                            
literal::= INT_LITERAL:v {: IntLiteral res = new IntLiteral((String)v); setColumnAndLine(res, vleft, vright); RESULT = res;:}
         | FLOAT_LITERAL:v {: FloatLiteral res = new FloatLiteral((String)v); setColumnAndLine(res, vleft, vright); RESULT = res;:}
         | TRUE:v {: BooleanLiteral res = new BooleanLiteral((String)v); setColumnAndLine(res, vleft, vright); RESULT = res;:}
         | FALSE:v {: BooleanLiteral res = new BooleanLiteral((String)v); setColumnAndLine(res, vleft, vright); RESULT = res; :}
         ;